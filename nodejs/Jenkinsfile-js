pipeline {
  agent any
  environment {
    AWS_REGION     = 'ap-southeast-2'                   // your region
    AWS_ACCOUNT_ID = '768227742578'                     // your account
    ECR_REPO       = 'matcha'                      // your ECR repo
    IMAGE          = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}"
    PROJECT_NAME   = "nodejs-svc"
    K8S_NS         = 'apps'
    EXPOSE_TYPE    = 'LoadBalancer'         
    EKS_CLUSTER    = 'cluster-matcha'  
  }
  options { timestamps() }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Ensure ECR repo (first run only)') {
      steps {
        sh '''
          aws ecr describe-repositories --repository-names $ECR_REPO --region $AWS_REGION \
          || aws ecr create-repository --repository-name $ECR_REPO --region $AWS_REGION
        '''
      }
    }

    stage('Login to ECR') {
      steps {
        sh '''
          aws ecr get-login-password --region $AWS_REGION \
          | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
        '''
      }
    }

    stage('Build image') {
      steps {
        script { env.GIT_SHA = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim() }
        sh '''
          docker build -t $IMAGE/$PROJECT_NAME:$GIT_SHA -t $IMAGE/$PROJECT_NAME:latest -f nodejs/Dockerfile-js .
        '''
      }
    }

    stage('Push image') {
      steps {
        sh '''
          docker push $IMAGE/$PROJECT_NAME:$GIT_SHA
          docker push $IMAGE/$PROJECT_NAME:latest
        '''
      }
    }

    stage('Deploy to EKS') {
      steps {
        sh '''
          aws eks update-kubeconfig --name cluster-matcha --region ap-southeast-2
          # ensure namespace exists
          kubectl get ns $K8S_NS || kubectl create ns $K8S_NS

          # update image in deployment file and apply
          sed -i "s#image: .*#image: $IMAGE/$PROJECT_NAME:latest#g" nodejs/deploy.yaml
          kubectl -n $K8S_NS apply -f nodejs/deploy.yaml

        '''
      }
    }

    stage('Show Public Endpoint') {
      steps {
        script {
          if (env.EXPOSE_TYPE == 'LoadBalancer') {
            sh '''
              echo "Waiting for external hostname..."
              for i in {1..30}; do
                HOST=$(kubectl -n $K8S_NS get svc matcha -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
                if [ -n "$HOST" ]; then echo "PUBLIC_URL: http://$HOST"; break; fi
                sleep 10
              done
              kubectl -n $K8S_NS get svc matcha -o wide
        
            '''
          } 
        }
      }
    }
  }
  }

